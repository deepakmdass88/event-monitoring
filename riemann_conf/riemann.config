; -*- mode: clojure; -*-
; vim: filetype=clojure
(import '(org.apache.log4j Level))
(logging/init :file "/var/log/riemann/riemann.log")

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server :host host)
  (udp-server :host host)
  (ws-server  :host host))
(logging/set-level Level/DEBUG)
; Expire old events from the index every 5 seconds.
(periodically-expire 5)

; Keep events in the index for 5 minutes by default.
(let [index (default :ttl 300 (update-index (index)))]

  ; Inbound events will be passed to these streams:
  (streams

    ; Index all events immediately.
    index

    ; Calculate an overall rate of events.
    (with {:metric 1 :host nil :state "ok" :service "events/sec"}
      (rate 5 index))

    ; Log expired events.
    (expired
      (fn [event] (info "expired" event)))
))
(streams
        prn
        (with {:state "normal"} prn)
        prn)
; Graphite server - connection pool
; Keep events in the index for 5 minutes by default.
(let [email (mailer {:from "spartans@gmail.com"
		     :host "smtp.gmail.com"
		     :user "spartans"
		     :pass "secret"
		     :ssl :yes!!!11
		})]
  (streams
    (where (>= metric 10)
      (where (service #"plivo")
        (email "spartans@gmail.com")))))
