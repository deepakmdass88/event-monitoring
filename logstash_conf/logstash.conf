input {
      file {
        type => "sip-5xx"
	path => "/var/tmp/event_logs/opensip_5xx.log"
  }
      tcp {
	type => "opensip-5xx"
	port => "5757"
  }
       tcp {
	type => "kamailio-registers"
	port => "5858"
  }
}

filter {
  grok {
        type => "apache-access"
    pattern => "%{COMBINEDAPACHELOG} %{NUMBER:resptime} %{NUMBER:resptimefull}"
  }
  grok {
	type => "opensip-5xx"
	pattern => "%{SYSLOGTIMESTAMP} %{DATA:server_details} ::: %{TIMESTAMP_ISO8601} %{DATA:server_type} %{PROG:program}(?:\[%{POSINT:pid}\])?: (?:\[%{POSINT:pid}\])? - >>> %{DATA:direction} CALL %{UUID} FROM %{DATA:from_uri} - RURI %{DATA:to_uri} - Got %{DATA:error_code} %{DATA:error_message} from %{DATA:protocol} sip:%{IP:carrier_gw_ip}:%{POSINT:port}"
  }

  grok {
	type => "kamailio-registers"
	pattern => ["%{SYSLOGTIMESTAMP} %{DATA:server_details} ::: %{TIMESTAMP_ISO8601} %{DATA:server_type} %{PROG:program}(?:\[%{POSINT:pid}\])?: (?:\[%{POSINT:pid}\])? - INFO: <script>: SIP PACKET REGISTER %{DATA:sip_id} <%{DATA:sip_uri};transport=%{DATA:transport_protocol};ob>;reg-id=%{DATA:reg_id};\+sip.instance=\"<urn:uuid:%{UUID:urn_uuid}>\";expires=%{DATA:ws_expiry_in_sec} from Source %{DATA:source_ip}:%{DATA:source_port} - Received on %{DATA:kamailio_ip}:%{DATA:kamailio_port}","%{SYSLOGTIMESTAMP} %{DATA:server_details} ::: %{TIMESTAMP_ISO8601} %{DATA:server_type} %{PROG:program}(?:\[%{POSINT:pid}\])?: (?:\[%{POSINT:pid}\])? - INFO: <script>: SIP PACKET REGISTER %{DATA:sip_id} <%{DATA:sip_uri};transport=%{DATA:transport_protocol}>;reg-id=%{DATA:reg_id};\+sip.instance=\"<urn:uuid:%{UUID:urn_uuid}>\";expires=%{DATA:ws_expiry_in_sec} from Source %{DATA:source_ip}:%{DATA:source_port} - Received on %{DATA:kamailio_ip}:%{DATA:kamailio_port}", "%{SYSLOGTIMESTAMP} %{DATA:server_details} ::: %{TIMESTAMP_ISO8601} %{DATA:server_type} %{PROG:program}(?:\[%{POSINT:pid}\])?: (?:\[%{POSINT:pid}\])? - INFO: <script>: SIP PACKET REGISTER %{DATA:sip_id} <%{DATA:sip_uri};transport=%{DATA:transport_protocol};ob>;reg-id=%{DATA:reg_id};\+sip.instance=\"<urn:uuid:%{UUID:urn_uuid}>\" from Source %{DATA:source_ip}:%{DATA:source_port} - Received on %{DATA:kamailio_ip}:%{DATA:kamailio_port}", "%{SYSLOGTIMESTAMP} %{DATA:server_details} ::: %{TIMESTAMP_ISO8601} %{DATA:server_type} %{PROG:program}(?:\[%{POSINT:pid}\])?: (?:\[%{POSINT:pid}\])? - INFO: <script>: SIP PACKET REGISTER %{DATA:sip_id} <%{DATA:sip_uri};rinstance=%{DATA:rinstance};transport=%{DATA:transport_protocol}> from Source %{DATA:source_ip}:%{DATA:source_port} - Received on %{DATA:kamailio_ip}:%{DATA:kamailio_port}", "%{SYSLOGTIMESTAMP} %{DATA:server_details} ::: %{TIMESTAMP_ISO8601} %{DATA:server_type} %{PROG:program}(?:\[%{POSINT:pid}\])?: (?:\[%{POSINT:pid}\])? - INFO: <script>: SIP PACKET REGISTER %{DATA:sip_id} <%{DATA:sip_uri};transport=%{DATA:transport_protocol};ob> from Source %{DATA:source_ip}:%{DATA:source_port} - Received on %{DATA:kamailio_ip}:%{DATA:kamailio_port}", "%{SYSLOGTIMESTAMP} %{DATA:server_details} ::: %{TIMESTAMP_ISO8601} %{DATA:server_type} %{PROG:program}(?:\[%{POSINT:pid}\])?: (?:\[%{POSINT:pid}\])? - INFO: <script>: SIP PACKET REGISTER %{DATA:sip_id} <%{DATA:sip_uri}>;expires=%{DATA:expiry_in_sec};\+sip.instance=\"<urn:uuid:%{UUID:urn_uuid}>\" from Source %{DATA:source_ip}:%{DATA:source_port} - Received on %{DATA:kamailio_ip}:%{DATA:kamailio_port}", "%{SYSLOGTIMESTAMP} %{DATA:server_details} ::: %{TIMESTAMP_ISO8601} %{DATA:server_type} %{PROG:program}(?:\[%{POSINT:pid}\])?: (?:\[%{POSINT:pid}\])? - INFO: <script>: SIP PACKET REGISTER %{DATA:sip_id} <%{DATA:sip_uri}> from Source %{DATA:source_ip}:%{DATA:source_port} - Received on %{DATA:kamailio_ip}:%{DATA:kamailio_port}"]
 }

if [source_ip]  {
    geoip {
      type => "kamailio-registers"
      source => "source_ip"
#	fields => ["latitude","longitude"]
	target => "geoip"
	add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
	add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float" ]
    }
  }
}

output {
  stdout {
    debug => true
      }
#  statsd {
#    type => "opensip-5xx"
#    host => "localhost"
#    port => 8125
#    debug => true
#    timing => [ "apache.servetime", "%{resptimefull}" ]
#    increment => "opensip.status.%{error_code}"
#    namespace => plivo
#    sender => sip
#  }
#riemann {
#    type => "opensip-5xx"
#    debug => true
#    host => "192.168.56.101"
#    riemann_event =>  [
#                        "service", "opensip-5xx",
#                        "state", "critical",
#                        "description", "5XX errors detected"
#                      ]
#  }
elasticsearch {
host => "192.168.56.101"
}
}
